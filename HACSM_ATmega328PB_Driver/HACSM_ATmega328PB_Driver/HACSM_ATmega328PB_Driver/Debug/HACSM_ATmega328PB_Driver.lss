
HACSM_ATmega328PB_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000526  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800100  00800100  00000526  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000526  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000558  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b00  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098f  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003b5  00000000  00000000  00001a77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000520  00000000  00000000  00001f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014e  00000000  00000000  00002428  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002576  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__vector_21>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e2 eb       	ldi	r30, 0xB2	; 178
  c8:	f4 e0       	ldi	r31, 0x04	; 4
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 30       	cpi	r26, 0x00	; 0
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a0 e0       	ldi	r26, 0x00	; 0
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ad 30       	cpi	r26, 0x0D	; 13
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 c9 00 	call	0x192	; 0x192 <main>
  ea:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <Set_ADMUX_Channel>:
{
	/* Wait for data to be received */
	while (!(UCSR1A & (1<<RXC0)));
	/* Get and return received data from buffer */
	return UDR1;
}
  f2:	ec e7       	ldi	r30, 0x7C	; 124
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	90 81       	ld	r25, Z
  f8:	90 7f       	andi	r25, 0xF0	; 240
  fa:	90 83       	st	Z, r25
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	51 f0       	breq	.+20     	; 0x114 <Set_ADMUX_Channel+0x22>
 100:	28 f0       	brcs	.+10     	; 0x10c <Set_ADMUX_Channel+0x1a>
 102:	82 30       	cpi	r24, 0x02	; 2
 104:	61 f0       	breq	.+24     	; 0x11e <Set_ADMUX_Channel+0x2c>
 106:	83 30       	cpi	r24, 0x03	; 3
 108:	79 f0       	breq	.+30     	; 0x128 <Set_ADMUX_Channel+0x36>
 10a:	13 c0       	rjmp	.+38     	; 0x132 <Set_ADMUX_Channel+0x40>
 10c:	ec e7       	ldi	r30, 0x7C	; 124
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	80 83       	st	Z, r24
 114:	ec e7       	ldi	r30, 0x7C	; 124
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	88 60       	ori	r24, 0x08	; 8
 11c:	80 83       	st	Z, r24
 11e:	ec e7       	ldi	r30, 0x7C	; 124
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	84 60       	ori	r24, 0x04	; 4
 126:	80 83       	st	Z, r24
 128:	ec e7       	ldi	r30, 0x7C	; 124
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	8c 60       	ori	r24, 0x0C	; 12
 130:	80 83       	st	Z, r24
 132:	ec e7       	ldi	r30, 0x7C	; 124
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	80 83       	st	Z, r24
 13c:	08 95       	ret

0000013e <ADC_Init>:
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	87 b1       	in	r24, 0x07	; 7
 144:	87 b9       	out	0x07, r24	; 7
 146:	ca e7       	ldi	r28, 0x7A	; 122
 148:	d0 e0       	ldi	r29, 0x00	; 0
 14a:	88 81       	ld	r24, Y
 14c:	88 6a       	ori	r24, 0xA8	; 168
 14e:	88 83       	st	Y, r24
 150:	88 81       	ld	r24, Y
 152:	87 60       	ori	r24, 0x07	; 7
 154:	88 83       	st	Y, r24
 156:	eb e7       	ldi	r30, 0x7B	; 123
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	83 60       	ori	r24, 0x03	; 3
 15e:	80 83       	st	Z, r24
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	0e 94 79 00 	call	0xf2	; 0xf2 <Set_ADMUX_Channel>
 166:	ec e7       	ldi	r30, 0x7C	; 124
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	80 64       	ori	r24, 0x40	; 64
 16e:	80 83       	st	Z, r24
 170:	88 81       	ld	r24, Y
 172:	80 64       	ori	r24, 0x40	; 64
 174:	88 83       	st	Y, r24
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <USART_Init>:
 17c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 180:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 184:	88 e1       	ldi	r24, 0x18	; 24
 186:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 18a:	8e e0       	ldi	r24, 0x0E	; 14
 18c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 190:	08 95       	ret

00000192 <main>:

int main(void)
{
	ADC_Init();
 192:	0e 94 9f 00 	call	0x13e	; 0x13e <ADC_Init>
	USART_Init(BAUDRATE);
 196:	87 e6       	ldi	r24, 0x67	; 103
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 be 00 	call	0x17c	; 0x17c <USART_Init>
    sei();
 19e:	78 94       	sei
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <main+0xe>

000001a2 <__vector_21>:
		
    }
}

// Interrupt for when the ADC finishes converting sensor values
ISR (ADC_vect) {
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
 1ac:	2f 93       	push	r18
 1ae:	3f 93       	push	r19
 1b0:	4f 93       	push	r20
 1b2:	5f 93       	push	r21
 1b4:	6f 93       	push	r22
 1b6:	7f 93       	push	r23
 1b8:	8f 93       	push	r24
 1ba:	9f 93       	push	r25
 1bc:	af 93       	push	r26
 1be:	bf 93       	push	r27
 1c0:	cf 93       	push	r28
 1c2:	ef 93       	push	r30
 1c4:	ff 93       	push	r31
	
	// Obtain data from ADC channel and place it in the corresponding slot in the data array.
	switch (ADC_channel_number){
 1c6:	c0 91 04 01 	lds	r28, 0x0104	; 0x800104 <ADC_channel_number>
 1ca:	c1 30       	cpi	r28, 0x01	; 1
 1cc:	79 f0       	breq	.+30     	; 0x1ec <__vector_21+0x4a>
 1ce:	28 f0       	brcs	.+10     	; 0x1da <__vector_21+0x38>
 1d0:	c2 30       	cpi	r28, 0x02	; 2
 1d2:	a9 f0       	breq	.+42     	; 0x1fe <__vector_21+0x5c>
 1d4:	c3 30       	cpi	r28, 0x03	; 3
 1d6:	e1 f0       	breq	.+56     	; 0x210 <__vector_21+0x6e>
 1d8:	24 c0       	rjmp	.+72     	; 0x222 <__vector_21+0x80>
		case 0:
			ADC_data[0] = ADC;			// Get data from the ADC at channel 0
 1da:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 1de:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1e2:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <ADC_data+0x1>
 1e6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <ADC_data>
			break;
 1ea:	23 c0       	rjmp	.+70     	; 0x232 <__vector_21+0x90>
			
		case 1:
			ADC_data[1] = ADC;			// Get data from the ADC at channel 0
 1ec:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 1f0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1f4:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <ADC_data+0x3>
 1f8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <ADC_data+0x2>
			break;
 1fc:	1a c0       	rjmp	.+52     	; 0x232 <__vector_21+0x90>
			
		case 2:
			ADC_data[2] = ADC;			// Get data from the ADC at channel 0
 1fe:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 202:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 206:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <ADC_data+0x5>
 20a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <ADC_data+0x4>
			break;
 20e:	11 c0       	rjmp	.+34     	; 0x232 <__vector_21+0x90>
			
		case 3:
			ADC_data[3] = ADC;			// Get data from the ADC at channel 0
 210:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 214:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 218:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <ADC_data+0x7>
 21c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <ADC_data+0x6>
			break;
 220:	08 c0       	rjmp	.+16     	; 0x232 <__vector_21+0x90>
			
		default:
			ADC_data[0] = ADC;			// Get data from the ADC at channel 0
 222:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 226:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 22a:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <ADC_data+0x1>
 22e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <ADC_data>
	}
	
	// Get Sensor Percentage Value
	// We get a 10-bit value from the ADC --> 2^10 = 1024
	// Dividing the data by 1024 gives us the sensor's percentage
	sensorPer_Val = ((ADC_data[ADC_channel_number] / 1024.0) * 100.0);
 232:	ec 2f       	mov	r30, r28
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	ee 0f       	add	r30, r30
 238:	ff 1f       	adc	r31, r31
 23a:	eb 5f       	subi	r30, 0xFB	; 251
 23c:	fe 4f       	sbci	r31, 0xFE	; 254
 23e:	60 81       	ld	r22, Z
 240:	71 81       	ldd	r23, Z+1	; 0x01
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__floatunsisf>
 24a:	20 e0       	ldi	r18, 0x00	; 0
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	40 e8       	ldi	r20, 0x80	; 128
 250:	5a e3       	ldi	r21, 0x3A	; 58
 252:	0e 94 99 01 	call	0x332	; 0x332 <__mulsf3>
 256:	20 e0       	ldi	r18, 0x00	; 0
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	48 ec       	ldi	r20, 0xC8	; 200
 25c:	52 e4       	ldi	r21, 0x42	; 66
 25e:	0e 94 99 01 	call	0x332	; 0x332 <__mulsf3>
 262:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 266:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 26a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 26e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	
	// Check channel number and either increment +1 or reset to 0.
	if (ADC_channel_number >= 3){
 272:	c3 30       	cpi	r28, 0x03	; 3
 274:	18 f0       	brcs	.+6      	; 0x27c <__vector_21+0xda>
		ADC_channel_number = 0;
 276:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ADC_channel_number>
 27a:	03 c0       	rjmp	.+6      	; 0x282 <__vector_21+0xe0>
	} else {
		ADC_channel_number++;
 27c:	cf 5f       	subi	r28, 0xFF	; 255
 27e:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <ADC_channel_number>
	}
	
	Set_ADMUX_Channel(ADC_channel_number);		// Set ADC channel to new ADC channel number
 282:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ADC_channel_number>
 286:	0e 94 79 00 	call	0xf2	; 0xf2 <Set_ADMUX_Channel>
	ADCSRA |= (1 << ADSC);						// Start conversion
 28a:	ea e7       	ldi	r30, 0x7A	; 122
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	80 64       	ori	r24, 0x40	; 64
 292:	80 83       	st	Z, r24
	
}
 294:	ff 91       	pop	r31
 296:	ef 91       	pop	r30
 298:	cf 91       	pop	r28
 29a:	bf 91       	pop	r27
 29c:	af 91       	pop	r26
 29e:	9f 91       	pop	r25
 2a0:	8f 91       	pop	r24
 2a2:	7f 91       	pop	r23
 2a4:	6f 91       	pop	r22
 2a6:	5f 91       	pop	r21
 2a8:	4f 91       	pop	r20
 2aa:	3f 91       	pop	r19
 2ac:	2f 91       	pop	r18
 2ae:	0f 90       	pop	r0
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	0f 90       	pop	r0
 2b4:	1f 90       	pop	r1
 2b6:	18 95       	reti

000002b8 <__floatunsisf>:
 2b8:	e8 94       	clt
 2ba:	09 c0       	rjmp	.+18     	; 0x2ce <__floatsisf+0x12>

000002bc <__floatsisf>:
 2bc:	97 fb       	bst	r25, 7
 2be:	3e f4       	brtc	.+14     	; 0x2ce <__floatsisf+0x12>
 2c0:	90 95       	com	r25
 2c2:	80 95       	com	r24
 2c4:	70 95       	com	r23
 2c6:	61 95       	neg	r22
 2c8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ca:	8f 4f       	sbci	r24, 0xFF	; 255
 2cc:	9f 4f       	sbci	r25, 0xFF	; 255
 2ce:	99 23       	and	r25, r25
 2d0:	a9 f0       	breq	.+42     	; 0x2fc <__floatsisf+0x40>
 2d2:	f9 2f       	mov	r31, r25
 2d4:	96 e9       	ldi	r25, 0x96	; 150
 2d6:	bb 27       	eor	r27, r27
 2d8:	93 95       	inc	r25
 2da:	f6 95       	lsr	r31
 2dc:	87 95       	ror	r24
 2de:	77 95       	ror	r23
 2e0:	67 95       	ror	r22
 2e2:	b7 95       	ror	r27
 2e4:	f1 11       	cpse	r31, r1
 2e6:	f8 cf       	rjmp	.-16     	; 0x2d8 <__floatsisf+0x1c>
 2e8:	fa f4       	brpl	.+62     	; 0x328 <__floatsisf+0x6c>
 2ea:	bb 0f       	add	r27, r27
 2ec:	11 f4       	brne	.+4      	; 0x2f2 <__floatsisf+0x36>
 2ee:	60 ff       	sbrs	r22, 0
 2f0:	1b c0       	rjmp	.+54     	; 0x328 <__floatsisf+0x6c>
 2f2:	6f 5f       	subi	r22, 0xFF	; 255
 2f4:	7f 4f       	sbci	r23, 0xFF	; 255
 2f6:	8f 4f       	sbci	r24, 0xFF	; 255
 2f8:	9f 4f       	sbci	r25, 0xFF	; 255
 2fa:	16 c0       	rjmp	.+44     	; 0x328 <__floatsisf+0x6c>
 2fc:	88 23       	and	r24, r24
 2fe:	11 f0       	breq	.+4      	; 0x304 <__floatsisf+0x48>
 300:	96 e9       	ldi	r25, 0x96	; 150
 302:	11 c0       	rjmp	.+34     	; 0x326 <__floatsisf+0x6a>
 304:	77 23       	and	r23, r23
 306:	21 f0       	breq	.+8      	; 0x310 <__floatsisf+0x54>
 308:	9e e8       	ldi	r25, 0x8E	; 142
 30a:	87 2f       	mov	r24, r23
 30c:	76 2f       	mov	r23, r22
 30e:	05 c0       	rjmp	.+10     	; 0x31a <__floatsisf+0x5e>
 310:	66 23       	and	r22, r22
 312:	71 f0       	breq	.+28     	; 0x330 <__floatsisf+0x74>
 314:	96 e8       	ldi	r25, 0x86	; 134
 316:	86 2f       	mov	r24, r22
 318:	70 e0       	ldi	r23, 0x00	; 0
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	2a f0       	brmi	.+10     	; 0x328 <__floatsisf+0x6c>
 31e:	9a 95       	dec	r25
 320:	66 0f       	add	r22, r22
 322:	77 1f       	adc	r23, r23
 324:	88 1f       	adc	r24, r24
 326:	da f7       	brpl	.-10     	; 0x31e <__floatsisf+0x62>
 328:	88 0f       	add	r24, r24
 32a:	96 95       	lsr	r25
 32c:	87 95       	ror	r24
 32e:	97 f9       	bld	r25, 7
 330:	08 95       	ret

00000332 <__mulsf3>:
 332:	0e 94 ac 01 	call	0x358	; 0x358 <__mulsf3x>
 336:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__fp_round>
 33a:	0e 94 0f 02 	call	0x41e	; 0x41e <__fp_pscA>
 33e:	38 f0       	brcs	.+14     	; 0x34e <__mulsf3+0x1c>
 340:	0e 94 16 02 	call	0x42c	; 0x42c <__fp_pscB>
 344:	20 f0       	brcs	.+8      	; 0x34e <__mulsf3+0x1c>
 346:	95 23       	and	r25, r21
 348:	11 f0       	breq	.+4      	; 0x34e <__mulsf3+0x1c>
 34a:	0c 94 06 02 	jmp	0x40c	; 0x40c <__fp_inf>
 34e:	0c 94 0c 02 	jmp	0x418	; 0x418 <__fp_nan>
 352:	11 24       	eor	r1, r1
 354:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__fp_szero>

00000358 <__mulsf3x>:
 358:	0e 94 2e 02 	call	0x45c	; 0x45c <__fp_split3>
 35c:	70 f3       	brcs	.-36     	; 0x33a <__mulsf3+0x8>

0000035e <__mulsf3_pse>:
 35e:	95 9f       	mul	r25, r21
 360:	c1 f3       	breq	.-16     	; 0x352 <__mulsf3+0x20>
 362:	95 0f       	add	r25, r21
 364:	50 e0       	ldi	r21, 0x00	; 0
 366:	55 1f       	adc	r21, r21
 368:	62 9f       	mul	r22, r18
 36a:	f0 01       	movw	r30, r0
 36c:	72 9f       	mul	r23, r18
 36e:	bb 27       	eor	r27, r27
 370:	f0 0d       	add	r31, r0
 372:	b1 1d       	adc	r27, r1
 374:	63 9f       	mul	r22, r19
 376:	aa 27       	eor	r26, r26
 378:	f0 0d       	add	r31, r0
 37a:	b1 1d       	adc	r27, r1
 37c:	aa 1f       	adc	r26, r26
 37e:	64 9f       	mul	r22, r20
 380:	66 27       	eor	r22, r22
 382:	b0 0d       	add	r27, r0
 384:	a1 1d       	adc	r26, r1
 386:	66 1f       	adc	r22, r22
 388:	82 9f       	mul	r24, r18
 38a:	22 27       	eor	r18, r18
 38c:	b0 0d       	add	r27, r0
 38e:	a1 1d       	adc	r26, r1
 390:	62 1f       	adc	r22, r18
 392:	73 9f       	mul	r23, r19
 394:	b0 0d       	add	r27, r0
 396:	a1 1d       	adc	r26, r1
 398:	62 1f       	adc	r22, r18
 39a:	83 9f       	mul	r24, r19
 39c:	a0 0d       	add	r26, r0
 39e:	61 1d       	adc	r22, r1
 3a0:	22 1f       	adc	r18, r18
 3a2:	74 9f       	mul	r23, r20
 3a4:	33 27       	eor	r19, r19
 3a6:	a0 0d       	add	r26, r0
 3a8:	61 1d       	adc	r22, r1
 3aa:	23 1f       	adc	r18, r19
 3ac:	84 9f       	mul	r24, r20
 3ae:	60 0d       	add	r22, r0
 3b0:	21 1d       	adc	r18, r1
 3b2:	82 2f       	mov	r24, r18
 3b4:	76 2f       	mov	r23, r22
 3b6:	6a 2f       	mov	r22, r26
 3b8:	11 24       	eor	r1, r1
 3ba:	9f 57       	subi	r25, 0x7F	; 127
 3bc:	50 40       	sbci	r21, 0x00	; 0
 3be:	9a f0       	brmi	.+38     	; 0x3e6 <__mulsf3_pse+0x88>
 3c0:	f1 f0       	breq	.+60     	; 0x3fe <__mulsf3_pse+0xa0>
 3c2:	88 23       	and	r24, r24
 3c4:	4a f0       	brmi	.+18     	; 0x3d8 <__mulsf3_pse+0x7a>
 3c6:	ee 0f       	add	r30, r30
 3c8:	ff 1f       	adc	r31, r31
 3ca:	bb 1f       	adc	r27, r27
 3cc:	66 1f       	adc	r22, r22
 3ce:	77 1f       	adc	r23, r23
 3d0:	88 1f       	adc	r24, r24
 3d2:	91 50       	subi	r25, 0x01	; 1
 3d4:	50 40       	sbci	r21, 0x00	; 0
 3d6:	a9 f7       	brne	.-22     	; 0x3c2 <__mulsf3_pse+0x64>
 3d8:	9e 3f       	cpi	r25, 0xFE	; 254
 3da:	51 05       	cpc	r21, r1
 3dc:	80 f0       	brcs	.+32     	; 0x3fe <__mulsf3_pse+0xa0>
 3de:	0c 94 06 02 	jmp	0x40c	; 0x40c <__fp_inf>
 3e2:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__fp_szero>
 3e6:	5f 3f       	cpi	r21, 0xFF	; 255
 3e8:	e4 f3       	brlt	.-8      	; 0x3e2 <__mulsf3_pse+0x84>
 3ea:	98 3e       	cpi	r25, 0xE8	; 232
 3ec:	d4 f3       	brlt	.-12     	; 0x3e2 <__mulsf3_pse+0x84>
 3ee:	86 95       	lsr	r24
 3f0:	77 95       	ror	r23
 3f2:	67 95       	ror	r22
 3f4:	b7 95       	ror	r27
 3f6:	f7 95       	ror	r31
 3f8:	e7 95       	ror	r30
 3fa:	9f 5f       	subi	r25, 0xFF	; 255
 3fc:	c1 f7       	brne	.-16     	; 0x3ee <__mulsf3_pse+0x90>
 3fe:	fe 2b       	or	r31, r30
 400:	88 0f       	add	r24, r24
 402:	91 1d       	adc	r25, r1
 404:	96 95       	lsr	r25
 406:	87 95       	ror	r24
 408:	97 f9       	bld	r25, 7
 40a:	08 95       	ret

0000040c <__fp_inf>:
 40c:	97 f9       	bld	r25, 7
 40e:	9f 67       	ori	r25, 0x7F	; 127
 410:	80 e8       	ldi	r24, 0x80	; 128
 412:	70 e0       	ldi	r23, 0x00	; 0
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	08 95       	ret

00000418 <__fp_nan>:
 418:	9f ef       	ldi	r25, 0xFF	; 255
 41a:	80 ec       	ldi	r24, 0xC0	; 192
 41c:	08 95       	ret

0000041e <__fp_pscA>:
 41e:	00 24       	eor	r0, r0
 420:	0a 94       	dec	r0
 422:	16 16       	cp	r1, r22
 424:	17 06       	cpc	r1, r23
 426:	18 06       	cpc	r1, r24
 428:	09 06       	cpc	r0, r25
 42a:	08 95       	ret

0000042c <__fp_pscB>:
 42c:	00 24       	eor	r0, r0
 42e:	0a 94       	dec	r0
 430:	12 16       	cp	r1, r18
 432:	13 06       	cpc	r1, r19
 434:	14 06       	cpc	r1, r20
 436:	05 06       	cpc	r0, r21
 438:	08 95       	ret

0000043a <__fp_round>:
 43a:	09 2e       	mov	r0, r25
 43c:	03 94       	inc	r0
 43e:	00 0c       	add	r0, r0
 440:	11 f4       	brne	.+4      	; 0x446 <__fp_round+0xc>
 442:	88 23       	and	r24, r24
 444:	52 f0       	brmi	.+20     	; 0x45a <__fp_round+0x20>
 446:	bb 0f       	add	r27, r27
 448:	40 f4       	brcc	.+16     	; 0x45a <__fp_round+0x20>
 44a:	bf 2b       	or	r27, r31
 44c:	11 f4       	brne	.+4      	; 0x452 <__fp_round+0x18>
 44e:	60 ff       	sbrs	r22, 0
 450:	04 c0       	rjmp	.+8      	; 0x45a <__fp_round+0x20>
 452:	6f 5f       	subi	r22, 0xFF	; 255
 454:	7f 4f       	sbci	r23, 0xFF	; 255
 456:	8f 4f       	sbci	r24, 0xFF	; 255
 458:	9f 4f       	sbci	r25, 0xFF	; 255
 45a:	08 95       	ret

0000045c <__fp_split3>:
 45c:	57 fd       	sbrc	r21, 7
 45e:	90 58       	subi	r25, 0x80	; 128
 460:	44 0f       	add	r20, r20
 462:	55 1f       	adc	r21, r21
 464:	59 f0       	breq	.+22     	; 0x47c <__fp_splitA+0x10>
 466:	5f 3f       	cpi	r21, 0xFF	; 255
 468:	71 f0       	breq	.+28     	; 0x486 <__fp_splitA+0x1a>
 46a:	47 95       	ror	r20

0000046c <__fp_splitA>:
 46c:	88 0f       	add	r24, r24
 46e:	97 fb       	bst	r25, 7
 470:	99 1f       	adc	r25, r25
 472:	61 f0       	breq	.+24     	; 0x48c <__fp_splitA+0x20>
 474:	9f 3f       	cpi	r25, 0xFF	; 255
 476:	79 f0       	breq	.+30     	; 0x496 <__fp_splitA+0x2a>
 478:	87 95       	ror	r24
 47a:	08 95       	ret
 47c:	12 16       	cp	r1, r18
 47e:	13 06       	cpc	r1, r19
 480:	14 06       	cpc	r1, r20
 482:	55 1f       	adc	r21, r21
 484:	f2 cf       	rjmp	.-28     	; 0x46a <__fp_split3+0xe>
 486:	46 95       	lsr	r20
 488:	f1 df       	rcall	.-30     	; 0x46c <__fp_splitA>
 48a:	08 c0       	rjmp	.+16     	; 0x49c <__fp_splitA+0x30>
 48c:	16 16       	cp	r1, r22
 48e:	17 06       	cpc	r1, r23
 490:	18 06       	cpc	r1, r24
 492:	99 1f       	adc	r25, r25
 494:	f1 cf       	rjmp	.-30     	; 0x478 <__fp_splitA+0xc>
 496:	86 95       	lsr	r24
 498:	71 05       	cpc	r23, r1
 49a:	61 05       	cpc	r22, r1
 49c:	08 94       	sec
 49e:	08 95       	ret

000004a0 <__fp_zero>:
 4a0:	e8 94       	clt

000004a2 <__fp_szero>:
 4a2:	bb 27       	eor	r27, r27
 4a4:	66 27       	eor	r22, r22
 4a6:	77 27       	eor	r23, r23
 4a8:	cb 01       	movw	r24, r22
 4aa:	97 f9       	bld	r25, 7
 4ac:	08 95       	ret

000004ae <_exit>:
 4ae:	f8 94       	cli

000004b0 <__stop_program>:
 4b0:	ff cf       	rjmp	.-2      	; 0x4b0 <__stop_program>
